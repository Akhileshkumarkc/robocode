<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property file="${common.dir}/build.properties"/>
    <property name="ivy.jar.dir" value="${user.home}/.ivy2/jars"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <defaultexcludes add="build.xml"/>
    <defaultexcludes add="**/.*/**"/>
    <defaultexcludes add="**/*.iml"/>
    <defaultexcludes add="**/*.ipr"/>
    <defaultexcludes add="**/*.iws"/>
    <defaultexcludes add="**/*.bak"/>
    <defaultexcludes add="**/Thumbs.db"/>
    <defaultexcludes add="**/~*"/>
    <defaultexcludes add="**/.*"/>
    <defaultexcludes add="**/.svn/**"/>
    <defaultexcludes add="**/_svn/**"/>
    <defaultexcludes add="**/launch/**"/>

    <path id="lib.path.id">
        <fileset dir="${lib.dir}"/>
    </path>
    <path id="libmain.path.id">
        <fileset dir="${lib.dir}"/>
        <path location="${main.classes.dir}"/>
    </path>
    <path id="libtest.path.id">
        <fileset dir="${lib.dir}"/>
        <path location="${main.classes.dir}"/>
        <path location="${test.classes.dir}"/>
    </path>
    <path id="run.path.id">
        <path refid="lib.path.id"/>
        <path location="${main.classes.dir}"/>
    </path>

    <!-- setup ivy default configuration with some custom info -->
    <property name="ivy.local.default.root" value="${repository.dir}/local"/>
    <property name="ivy.shared.default.root" value="${repository.dir}/shared"/>

    <ivy:settings file="${common.dir}/ivysettings.xml"/>


    <!-- =================================
              target: init
             ================================= -->
    <target name="init" description="--> init state">
        <uptodate property="jar.uptodate" targetfile="${jar.file}">
            <srcfiles dir="${src.dir}"/>
        </uptodate>
        <uptodate property="test.green" targetfile="${build.dir}/.tests_run">
            <srcfiles dir="${src.dir}"/>
        </uptodate>
        <uptodate property="javadoc.uptodate" targetfile="${build.dir}/.javadoc_build">
            <srcfiles dir="${src.main.java.dir}" includes="**/*.java"/>
        </uptodate>
        <available property="exits.src.main.res" file="${src.main.res.dir}"/>
        <available property="exits.src.test.res" file="${src.test.res.dir}"/>
        <available property="exits.src.test.java" file="${src.test.java.dir}"/>
    </target>

    <!-- =================================
              target: resolve
             ================================= -->
    <target name="resolve" depends="init, clean-lib" description="--> resolve and retrieve dependencies with ivy">
        <mkdir dir="${lib.dir}"/>
        <!-- not usually necessary, ivy creates the directory IF there are dependencies -->

        <!-- the call to resolve is not mandatory, retrieve makes an implicit call if we don't -->
        <ivy:resolve file="${ivy.file}"/>
        <ivy:retrieve pattern="${lib.dir}/[artifact].[ext]"/>
    </target>


    <!-- =================================
              target: report
             ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>

    <!-- =================================
              target: resources
             ================================= -->
    <target name="resources" depends="init" if="exits.src.main.res" unless="jar.uptodate"
            description="--> copy resources">
        <copy todir="${main.classes.dir}">
            <resources>
                <fileset dir="${src.main.res.dir}"/>
            </resources>
        </copy>
    </target>

    <!-- =================================
              target: compile
             ================================= -->
    <target name="compile" depends="resolve, resources" unless="jar.uptodate" description="--> compile the project">
        <mkdir dir="${main.classes.dir}"/>
        <javac srcdir="${src.main.java.dir}" destdir="${main.classes.dir}" classpathref="lib.path.id"
               debug="false"
               encoding="8859_1"
               source="1.5"
               target="1.5"
               optimize="true"
                >
            <compilerarg value="-Xlint"/>
        </javac>
    </target>


    <!-- =================================
              target: test.resources
             ================================= -->
    <target name="test.resources" depends="init" if="exits.src.test.res" unless="tests.green"
            description="--> copy test resources">
        <copy todir="${test.classes.dir}">
            <resources>
                <fileset dir="${src.test.res.dir}"/>
            </resources>
        </copy>
    </target>

    <!-- =================================
              target: test.compile
             ================================= -->
    <target name="test.compile" depends="compile, test.resources" unless="tests.green" if="exits.src.test.java"
            description="--> compile tests">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.test.java.dir}" destdir="${test.classes.dir}" classpathref="libmain.path.id"
               debug="true"
               encoding="8859_1"
               source="1.5"
               target="1.5"
               optimize="true"
                >
            <compilerarg value="-Xlint"/>
        </javac>
    </target>

    <!-- =================================
              target: test
             ================================= -->
    <target name="test" depends="init, test.compile" unless="tests.green" if="exits.src.test.java"
            description="Run tests">
        <delete includeemptydirs="true" dir="${build.dir}/test-reports" quiet="true"/>
        <mkdir dir="${build.dir}/test-reports"/>

        <junit printsummary="yes" haltonfailure="yes" dir="${basedir}">
            <classpath refid="libtest.path.id"/>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${build.dir}/test-reports">
                <fileset dir="${src.test.java.dir}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/RobotTestBed.java"/>
                </fileset>
            </batchtest>
        </junit>


        <!-- Flag that Robocode has been built -->
        <touch file="${build.dir}/.tests_run"/>
    </target>

    <!-- =================================
              target: javadoc
             ================================= -->
    <target
            name="javadoc"
            description="Generate javadoc"
            depends="init"
            if="javadoc.required"
            unless="javadoc.uptodate">

        <echo message="Generating javadoc..."/>

        <!-- Generate the javadoc documentation -->
        <javadoc
                destdir="${build.dir}/javadoc"
                sourcepath="${src.main.java.dir}"
                excludepackagenames="robocode.*, codesize.*, ar.*"
                windowtitle="Robocode ${version} API"
                link="http://java.sun.com/j2se/1.5.0/docs/api">
            <fileset dir="${src.main.java.dir}" defaultexcludes="yes">
                <include name="robocode/**/*.java"/>
                <exclude name="robocode/_*.java"/>
                <exclude name="robocode/control/RandomFactory.java"/>
            </fileset>
            <doctitle><![CDATA[<h1>Robocode ${version} API</h1>]]></doctitle>
        </javadoc>

        <!-- Flag that javadoc has been built -->
        <touch file="${build.dir}/.javadoc_build"/>
    </target>
    <!-- =================================
                  targets: ivy versions
                 ================================= -->
    <target name="ivy-new-version" unless="ivy.new.revision">
        <!-- default module version prefix value -->
        <property name="module.version.prefix" value="${module.version.target}-dev-b"/>

        <!-- asks to ivy an available version number -->
        <ivy:info file="${ivy.file}"/>
        <ivy:buildnumber
                organisation="${ivy.organisation}" module="${ivy.module}"
                revision="${module.version.prefix}" defaultBuildNumber="1" revSep=""/>
    </target>

    <target name="local-version">
        <tstamp>
            <format property="now" pattern="yyyyMMddHHmmss"/>
        </tstamp>
        <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
    </target>

    <target name="version" depends="ivy-new-version">
        <!-- create version file in classpath for later inclusion in jar -->
        <mkdir dir="${main.classes.dir}"/>
        <echo message="version=${ivy.new.revision}" file="${main.classes.dir}/${ant.project.name}.properties"
              append="false"/>

        <!-- load generated version properties file -->
        <property file="${main.classes.dir}/${ant.project.name}.properties"/>
    </target>

    <!-- =================================
              target: jar
             ================================= -->
    <target name="jar" depends="version, compile, resources" unless="jar.uptodate"
            description="--> make a jar file for this project">
        <jar destfile="${jar.file}">
            <fileset dir="${main.classes.dir}"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Version" value="${version}"/>
                <attribute name="Main-Class" value="${main.class.name}"/>
                <attribute name="Implementation-Title" value="Robocode"/>
                <attribute name="Implementation-Vendor" value="Mathew A. Nelson, Flemming N. Larsen, Pavel Savara"/>
            </manifest>
        </jar>
    </target>

    <!-- ================================= 
          target: publish              
         ================================= -->
    <target name="publish" depends="clean-build, test, jar, javadoc"
            description="--> publish this project in the ivy repository">
        <ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
                     resolver="shared"
                     pubrevision="${version}"
                     status="release"
                />
        <echo message="project ${ant.project.name} released with version ${version}"/>
    </target>

    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" depends="local-version, jar"
            description="--> publish this project in the local ivy repository">
        <ivy:publish artifactspattern="${build.dir}/[artifact].[ext]"
                     resolver="local"
                     pubrevision="${version}"
                     pubdate="${now}"
                     status="integration"
                     forcedeliver="true"
                />
        <echo message="project ${ant.project.name} published locally with version ${version}"/>
    </target>

    <!-- =================================
              target: clean-local
             ================================= -->
    <target name="clean-local"
            description="--> cleans the local repository for the current module">
        <ivy:info file="${ivy.file}"/>
        <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}"/>
    </target>

    <!-- =================================
              target: clean-lib
             ================================= -->
    <target name="clean-lib" unless="jar.uptodate"
            description="--> clean the project libraries directory (dependencies)">
        <delete includeemptydirs="true" dir="${lib.dir}"/>
    </target>

    <!-- ================================= 
          target: clean-build              
         ================================= -->
    <target name="clean-build" description="--> clean the project built files">
        <echo message="Cleaning ${ant.project.name}"/>
        <delete includeemptydirs="true" dir="${build.dir}"/>
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="clean-build, clean-lib" description="--> clean the project">
    </target>
</project>
